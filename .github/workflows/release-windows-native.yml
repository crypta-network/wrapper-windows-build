name: Release Windows Native

on:
  workflow_dispatch:
    inputs:
      run_id:
        description: "Workflow run ID of 'Windows Native Build' to source artifacts from (optional)."
        required: false
      prerelease:
        description: "Mark as prerelease"
        required: false
        type: boolean
        default: false
      draft:
        description: "Create the release as a draft"
        required: false
        type: boolean
        default: true

permissions:
  contents: write
  actions: read

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Read version
        id: ver
        uses: ./.github/actions/read-version
        with:
          properties_path: default.properties

      - name: Resolve source run
        id: resolve
        uses: actions/github-script@v7
        with:
          script: |
            const runInput = core.getInput('run_id');
            let run_id = runInput && runInput.trim();
            if (!run_id) {
              // Find the latest successful run of the build workflow on main
              const resp = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'windows-native.yml',
                status: 'completed',
                branch: 'main',
                per_page: 20,
              });
              const runs = (resp.data.workflow_runs || []).filter(r => r.conclusion === 'success');
              if (!runs.length) {
                core.setFailed('No successful runs found for windows-native.yml on main. Specify a run_id.');
                return;
              }
              run_id = String(runs[0].id);
              core.info(`Using run_id=${run_id}`);
            }
            core.setOutput('run_id', run_id);
            // Fetch run to get head SHA
            const run = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: Number(run_id),
            });
            const sha = run.data.head_sha;
            core.setOutput('sha', sha);
            core.setOutput('sha_short', sha.substring(0, 8));
            // booleans are read directly from inputs in later steps

      - name: Compute release metadata
        id: meta
        run: |
          echo "date=$(date -u +%Y-%m-%d)" >> "$GITHUB_OUTPUT"
          echo "date_tag=$(date -u +%Y%m%d%H%M%S)" >> "$GITHUB_OUTPUT"

      - name: Download artifact (x64 exe)
        uses: actions/download-artifact@v4
        with:
          name: wrapper-exe-x64
          run-id: ${{ steps.resolve.outputs.run_id }}
          path: artifacts/x64/exe
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download artifact (x64 dll)
        uses: actions/download-artifact@v4
        with:
          name: wrapper-dll-x64
          run-id: ${{ steps.resolve.outputs.run_id }}
          path: artifacts/x64/dll
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download artifact (arm64 exe)
        uses: actions/download-artifact@v4
        with:
          name: wrapper-exe-arm64
          run-id: ${{ steps.resolve.outputs.run_id }}
          path: artifacts/arm64/exe
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download artifact (arm64 dll)
        uses: actions/download-artifact@v4
        with:
          name: wrapper-dll-arm64
          run-id: ${{ steps.resolve.outputs.run_id }}
          path: artifacts/arm64/dll
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Package tarballs
        run: |
          set -euo pipefail
          mkdir -p release/x64 release/arm64

          # Helper to pick the first match
          pick_one() { find "$1" -type f -name "$2" -print -quit; }

          # x64
          x64_exe=$(pick_one artifacts/x64/exe wrapper.exe)
          x64_dll=$(pick_one artifacts/x64/dll wrapper.dll)
          if [ -z "$x64_exe" ] || [ -z "$x64_dll" ]; then
            echo "Missing x64 exe or dll (exe=$x64_exe dll=$x64_dll)" >&2
            exit 1
          fi
          cp "$x64_exe" release/x64/wrapper.exe
          cp "$x64_dll" release/x64/wrapper.dll
          tar -C release/x64 -czf release/wrapper-win-x64.tar.gz wrapper.exe wrapper.dll

          # arm64
          arm_exe=$(pick_one artifacts/arm64/exe wrapper.exe)
          arm_dll=$(pick_one artifacts/arm64/dll wrapper.dll)
          if [ -z "$arm_exe" ] || [ -z "$arm_dll" ]; then
            echo "Missing arm64 exe or dll (exe=$arm_exe dll=$arm_dll)" >&2
            exit 1
          fi
          cp "$arm_exe" release/arm64/wrapper.exe
          cp "$arm_dll" release/arm64/wrapper.dll
          tar -C release/arm64 -czf release/wrapper-win-arm64.tar.gz wrapper.exe wrapper.dll

          ls -l release

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: win-native-${{ steps.meta.outputs.date_tag }}-${{ steps.resolve.outputs.sha_short }}
          target_commitish: ${{ steps.resolve.outputs.sha }}
          name: ${{ steps.meta.outputs.date }}
          body: |
            Windows Native Release

            Version: ${{ steps.ver.outputs.version }}

            Artifacts:
            - wrapper-win-x64.tar.gz (x64)
            - wrapper-win-arm64.tar.gz (ARM64)

            Source commit: ${{ steps.resolve.outputs.sha }}
          draft: ${{ inputs.draft }}
          prerelease: ${{ inputs.prerelease }}
          files: |
            release/wrapper-win-x64.tar.gz
            release/wrapper-win-arm64.tar.gz
